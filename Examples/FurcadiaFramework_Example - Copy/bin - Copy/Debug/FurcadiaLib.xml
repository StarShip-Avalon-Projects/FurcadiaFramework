<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FurcadiaLib</name>
    </assembly>
    <members>
        <member name="T:Furcadia.Avatar.Frame">
             <summary>
            
             </summary>
        </member>
        <member name="M:Furcadia.Avatar.PrimeTable">
            <summary>
            Primes the table.
            </summary>
        </member>
        <member name="M:Furcadia.Avatar.SpecNum(System.Int32)">
            <summary>
            Specs the number.
            </summary>
            <param name="Frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="T:Furcadia.Base220">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Drawing.Graphics.Palette.Default">
            <summary>
            title261.pcx
            </summary>
        </member>
        <member name="M:Furcadia.Drawing.Helper.CharToDescTag(System.Char)">
            <summary>
            Converts a Char to Desc Tag
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:Furcadia.FurcMap.Map.Width">
            <summary>
            The actual width of the map (READ-ONLY)
            </summary>
        </member>
        <member name="P:Furcadia.FurcMap.Map.Height">
            <summary>
            The actual height of the map (READ-ONLY)
            </summary>
        </member>
        <member name="M:Furcadia.FurcMap.Map.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new empty map with the specified width and height
            </summary>
            <param name="width">The width of the map</param>
            <param name="height">The height of the map</param>
        </member>
        <member name="M:Furcadia.FurcMap.Map.LoadFrom(System.String)">
            <summary>
            Loads a map from a file
            </summary>
            <param name="filename">The file to load the map from</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the width and height of the map is not known (corrupt file)</exception>
            <returns>The map</returns>
        </member>
        <member name="M:Furcadia.FurcMap.Map.getFloorAt(System.Int32,System.Int32)">
            <summary>
            Get the floor number from a tile
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>The floor number</returns>
        </member>
        <member name="M:Furcadia.FurcMap.Map.setFloorAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the floor number at a tile specified by x and y
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="floorNumber"></param>
        </member>
        <member name="M:Furcadia.FurcMap.Map.getObjectAt(System.Int32,System.Int32)">
            <summary>
            Get the object number from a tile
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>The object number</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Furcadia.FurcMap.Map.setObjectAt(System.Int32,System.Int32,System.Int32)" -->
        <member name="M:Furcadia.FurcMap.Map.getWallAt(System.Int32,System.Int32)">
            <summary>
            Get the wall number from a tile
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>The wall number</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Furcadia.FurcMap.Map.setWallAt(System.Int32,System.Int32,System.Int32)" -->
        <member name="M:Furcadia.FurcMap.Map.getRegionAt(System.Int32,System.Int32)">
            <summary>
            Get the region number from a tile
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>The region number</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Furcadia.FurcMap.Map.setRegionAt(System.Int32,System.Int32,System.Int32)" -->
        <member name="M:Furcadia.FurcMap.Map.getEffectAt(System.Int32,System.Int32)">
            <summary>
            Get the effect number from a tile
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>The effect number</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Furcadia.FurcMap.Map.setEffectAt(System.Int32,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Furcadia.FurcMap.Map.getMapPos(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Furcadia.FurcMap.Map.getMapTile(System.Int32,System.Int32)" -->
        <member name="M:Furcadia.FurcMap.Map.Save(System.String,System.Boolean)">
            <summary>
            Save the map to a file
            </summary>
            <param name="filename">The filename to save to</param>
            <param name="overwrite">If a file with that name already exist, should we overwrite it?</param>
            <returns>True if the save was a success, False if not</returns>
        </member>
        <member name="T:Furcadia.IO.FurcadiaIOException">
            <summary>
            Desctiption of FurcadiaIOException.
            </summary>
        </member>
        <member name="T:Furcadia.IO.FurcadiaNotFoundException">
            <summary>
            Desctiption of FurcadiaNotFoundException.
            </summary>
        </member>
        <member name="T:Furcadia.IO.ParseClient">
            <summary>
            Parse Client Data
            </summary>
        </member>
        <member name="T:Furcadia.IO.ParseServer">
            <summary>
            Parsing Server Data with Events
            </summary>
        </member>
        <member name="T:Furcadia.IO.ParseServer.ParsedChannelEventHandler">
            <summary>
            Event fired when we have successful parsed Channel Data
            </summary>
            <param name="o">
            </param>
            <param name="e">
            </param>
        </member>
        <member name="T:Furcadia.IO.ParseServer.ParsedDataEventHandler">
            <summary>
            Fired when we have parsed channel data
            </summary>
            <param name="o">
            </param>
            <param name="e">
            </param>
        </member>
        <member name="F:Furcadia.IO.ParseServer.FurcadiaDream">
            <summary>
            Current Furcadia Dream
            </summary>
        </member>
        <member name="F:Furcadia.IO.ParseServer.FurcadiaPlayer">
            <summary>
            Current Triggering Furre
            </summary>
        </member>
        <member name="F:Furcadia.IO.ParseServer.Channel">
            <summary>
            Furcadia text channel
            </summary>
        </member>
        <member name="M:Furcadia.IO.ParseServer.#ctor(Furcadia.Net.DREAM@,Furcadia.Net.FURRE@)">
            <summary>
            </summary>
            <param name="Dream">
            Current Furcadia Dream
            </param>
            <param name="Player">
            Current Triggering Furre
            </param>
        </member>
        <member name="M:Furcadia.IO.ParseServer.ParseServerChannel(System.String,System.Boolean@)">
            <summary>
            Parse the text channels coming from the server
            </summary>
            <param name="data">
            </param>
            <param name="handled">
            </param>
        </member>
        <member name="M:Furcadia.IO.ParseServer.ParseServerData(System.String,System.Boolean@)">
            <summary>
            Parse the raw data coming from the Game Server
            </summary>
            <param name="data">
            Raw Server Data aka Server Instruction
            <para>
            ref=http://ftr.icerealm.org/ref-instructions/
            </para>
            </param>
            <param name="handled">
            </param>
        </member>
        <member name="T:Furcadia.IO.ServerQue">
            <summary>
            Balance the load to the server
            <para>Handles Throat-Tired and No Endurance</para>
            </summary>
        </member>
        <member name="F:Furcadia.IO.ServerQue.noendurance">
            <summary>
            NoEndurance. Send data at the speed of the server
            </summary>
        </member>
        <member name="F:Furcadia.IO.ServerQue.throattired">
            <summary>
            Throat Tired System.
            <para>Pause sending data to server if we get a message we tried to send too much at one time</para>
            </summary>
        </member>
        <member name="M:Furcadia.IO.ServerQue.on_Tick(System.Double)">
            <summary>
            Load Balancing Function
            <para>this makes sure we don't over load what the server can handle</para>
            <para>Bot has 2 modes of operation</para>
            <para>Mode 1 Normal. Prepare for Throat Tired syndrome</para>
            <para>Mode 2 NoEndurance. Send data to server as fast as it can handle with lout overloading its buffer</para>
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Furcadia.IO.ServerQue.SndToServer(System.String)">
             <summary>
             Incoming Messages for server processing
            
             </summary>
             <param name="data"></param>
        </member>
        <member name="T:Furcadia.IO.SubSystem.PhoenixSpeakParser">
            <summary>
            Parses Phoenix Speak responses from the game server
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Furcadia.IO.UserFileAccessRights" -->
        <member name="M:Furcadia.IO.UserFileAccessRights.getWindowsIdentity">
            <summary>
            Simple accessor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furcadia.IO.UserFileAccessRights.getPath">
            <summary>
            Simple accessor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furcadia.IO.UserFileAccessRights.#ctor(System.String)">
            <summary>
            Convenience constructor assumes the current user
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Furcadia.IO.UserFileAccessRights.#ctor(System.String,System.Security.Principal.WindowsIdentity)">
            <summary>
            Supply the path to the file or directory and a user or group.
            Access checks are done
            during instantiation to ensure we always have a valid object
            </summary>
            <param name="path"></param>
            <param name="principal"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Furcadia.IO.UserFileAccessRights.ToString" -->
        <member name="M:Furcadia.IO.UserFileAccessRights.contains(System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Convenience method to test if the right exists within the given rights
            </summary>
            <param name="right"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="T:Furcadia.IO.FurcIni">
            <summary>
            Furcadia configuration class to backup/set firewall setting and restore them after we have
            connected to the game server
            <para>
            Author Gerolkae
            </para>
            <para>
            Courtesy to Dream Dancer for helping me with this
            </para>
            </summary>
        </member>
        <member name="M:Furcadia.IO.FurcIni.GetUserSetting(System.String,System.String[])">
            <summary>
            Retrieves a feild setting in the FurcSettings array
            </summary>
            <param name="file">
            </param>
            <returns>
            Value
            </returns>
        </member>
        <member name="M:Furcadia.IO.FurcIni.LoadFurcadiaSettings(System.String,System.String)">
            <summary>
            Backs up the current Furcadia Settings
            </summary>
            <param name="path">
            </param>
            <param name="file">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.IO.FurcIni.SaveFurcadiaSettings(System.String,System.String,System.String[])">
            <summary>
            Save the furcadia configuration to settings.ini
            </summary>
            <param name="path">
            </param>
            <param name="file">
            </param>
            <param name="SettingFile">
            </param>
        </member>
        <member name="M:Furcadia.IO.FurcIni.SetUserSetting(System.String,System.String,System.String[])">
            <summary>
            sets feilds in the FurcSettings array
            </summary>
            <param name="file">
            </param>
            <returns>
            true on success.
            </returns>
        </member>
        <member name="M:Furcadia.IO.IniParser.#ctor(System.String)">
            <summary>
            Opens the INI file at the given path and enumerates the values in the IniParser.
            </summary>
            <param name="iniPath">Full path to INI file.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.GetSetting(System.String,System.String)">
            <summary>
            Returns the value for the given section, key pair.
            </summary>
            <param name="sectionName">Section name.</param>
            <param name="settingName">Key name.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.EnumSection(System.String)">
            <summary>
            Enumerates all lines for given section.
            </summary>
            <param name="sectionName">Section to enum.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.AddSetting(System.String,System.String,System.String)">
            <summary>
            Adds or replaces a setting to the table to be saved.
            </summary>
            <param name="sectionName">Section to add under.</param>
            <param name="settingName">Key name to add.</param>
            <param name="settingValue">Value of key.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.AddSetting(System.String,System.String)">
            <summary>
            Adds or replaces a setting to the table to be saved with a null value.
            </summary>
            <param name="sectionName">Section to add under.</param>
            <param name="settingName">Key name to add.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.DeleteSetting(System.String,System.String)">
            <summary>
            Remove a setting.
            </summary>
            <param name="sectionName">Section to add under.</param>
            <param name="settingName">Key name to add.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.SaveSettings(System.String)">
            <summary>
            Save settings to new file.
            </summary>
            <param name="newFilePath">New file path.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.SaveSettings">
            <summary>
            Save settings back to ini file.
            </summary>
        </member>
        <member name="T:Furcadia.IO.Paths">
             <summary>
             This class contains all the paths related to the users furcadia installation.
            <para>***NOTICE: DO NOT REMOVE***</para>
            <para> Credits go to Artex for helping me fix Path issues and contributing his code.</para>
            <para>***NOTICE: DO NOT REMOVE.***</para>
            <para>Log Header</para>
            <para>Format: (date,Version) AuthorName, Changes.</para>
            <para> (Mar 12,2014,0.2.12) Gerolkae, Adapted Paths to work with a Supplied path</para>
            <para>  (June 1, 2016) Gerolkae, Added possible missing Registry Paths for x86/x64 Windows and Mono Support. Wine Support also contains these corrections.</para>
             </summary>
        </member>
        <member name="M:Furcadia.IO.Paths.#ctor">
            <summary>
            Defines the base path for the Furcadia Directory
            </summary>
        </member>
        <member name="M:Furcadia.IO.Paths.#ctor(System.String)">
            <summary>
            Defines the base path for the Furcadia Directory Throws FurcadiaNotFound exception if
            furcadia.exe cannot be found in specified path
            </summary>
            <param name="path">
            </param>
        </member>
        <member name="M:Furcadia.IO.Paths.ProgramFilesX86">
            <summary>
            Determines the registry path by platform. (x32/x64) Thanks to Ioka for this one.
            </summary>
            <returns>
            A path to the Furcadia registry folder or NullReferenceException.
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetCachePath">
            <summary>
            Get the All Users Application Data path for Furcadia.
            </summary>
            <returns>
            All Users Application Data path for Furcadia.
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetDefaultPatchPath">
            <summary>
            Find the path to the default patch folder on the current machine.
            </summary>
            <returns>
            Path to the default patch folder or null if not found.
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetDynAvatarPath">
            <summary>
            Get the All Dynamic Avatar path for Furcadia.
            </summary>
            <returns>
            All Dynamic Avatar path for Furcadia.
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetFurcadiaCharactersPath">
            <summary>
            Gets the location of the Furcadia Character Files
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the location of Furcadia Characters folder in
            "My Documents".
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetFurcadiaDocPath">
            <summary>
            Gets the location of the Furcadia folder located in "My Documents"
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the location of Furcadia folder in "My Documents".
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetInstallPath">
            <summary>
            Find the path to Furcadia data files currently installed on this system.
            </summary>
            <returns>
            Path to the Furcadia program folder or null if not found/not installed.
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetLocaldirPath">
            <summary>
            Find the current localdir path where data files would be stored on the current machine.
            </summary>
            <returns>
            Path to the data folder from localdir.ini or null if not found.
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetLocalSettingsPath">
            <summary>
            Get the path to the Local Settings directory for Furcadia.
            </summary>
            <returns>
            Furcadia local settings directory.
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetRegistryPath">
            <summary>
            Determines the registry path by platform. (x32/x64) Thanks to Ioka for this one.
            </summary>
            <returns>
            A path to the Furcadia registry folder or NullReferenceException.
            </returns>
        </member>
        <member name="T:Furcadia.Net.DREAM">
            <summary>
            Current Dream information
            </summary>
        </member>
        <member name="F:Furcadia.Net.DREAM.FurreList">
            <summary>
            Dream List Furcadia requires Clients to handle thier own Dream Lists See
            http://dev.furcadia.com/docs New Movement for Spawn and Remove packets
            **Spawn is out dated. New information requires a 4byte for AFK flag at the end
            </summary>
        </member>
        <member name="P:Furcadia.Net.DREAM.Rating">
            <summary>
            Furcadia Dream rating
            </summary>
        </member>
        <member name="T:Furcadia.Net.FURRE">
            <summary>
            Class for Proxies and bots to use Furrre Data provided by the game server.
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Name">
            <summary>
            Furcadia Name
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Message">
            <summary>
            Last Message Furre had
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.ShortName">
            <summary>
            Furcadia Shortname format for Furre Name
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.ColorType">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Shape">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.FrameInfo">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Color">
            <summary>
            Furcadia Color Code
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Desc">
            <summary>
            Furcadia Description
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Position">
            <summary>
            Current position where the Furre is standing
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.SourceX">
            <summary>
            the X Position the Furre moved from
            <para>
            Obsolete. Use LasPosition as FurrePosition
            </para>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.SourceY">
            <summary>
            the Y Position the Furre moved from
            <para>
            Obsolete. Use LasPosition as FurrePosition
            </para>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.X">
            <summary>
            the X Position the Furre is currently standing at
            <para>
            Obsolete. Use Position as FurrePosition
            </para>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Y">
            <summary>
            the Y Position the Furre Standing At
            <para>
            Obsolete. Use Position as FurrePosition
            </para>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.LastPosition">
            <summary>
            The Position the Furre Moved from
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.ID">
            <summary>
            Furre ID
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Flag">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Badge">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Tag">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Group">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Level">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Option">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Option1">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.PawObjectCurrent">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.PawObjectOld">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.FloorObjectCurrent">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.FloorObjectOld">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.AFK">
            <summary>
            Away from keyboard time
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.LastStat">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Gender">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Species">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.DSSpecies">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Wings">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Special">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.Visible">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURRE.WasVisible">
            <summary>
            </summary>
        </member>
        <member name="M:Furcadia.Net.FURRE.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Furcadia.Net.FURRE.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="FurreID">
            </param>
        </member>
        <member name="M:Furcadia.Net.FURRE.#ctor(System.String)">
            <summary>
            Furre Constructor with Name
            </summary>
            <param name="Name">
            </param>
        </member>
        <member name="M:Furcadia.Net.FURRE.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURRE.ToString(System.Func{Furcadia.Net.FURRE,System.String})">
            <summary>
            </summary>
            <param name="format">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURRE.ToFurcadiaID">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURRE.ToFurcadiaID(System.Func{Furcadia.Net.FURRE,System.Int32})">
            <summary>
            </summary>
            <param name="format">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURRE.Equals(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURRE.GetHashCode">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Furcadia.Net.FURREList">
            <summary>
            Furre List information for a Furcadia Dream
            <para>
            This class acts like an enhanced List(of &gt;T&lt;) because you can Select a Furre by Item as
            well as index
            </para>
            </summary>
        </member>
        <member name="F:Furcadia.Net.FURREList.fList">
            <summary>
            </summary>
        </member>
        <member name="M:Furcadia.Net.FURREList.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURREList.Count">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURREList.Current">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURREList.IsSynchronized">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURREList.SyncRoot">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.FURREList.Item(System.Int32)">
            <summary>
            </summary>
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:Furcadia.Net.FURREList.Item(Furcadia.Net.FURRE)">
            <summary>
            </summary>
            <param name="Furre">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURREList.add(Furcadia.Net.FURRE)">
            <summary>
            </summary>
            <param name="Furre">
            </param>
        </member>
        <member name="M:Furcadia.Net.FURREList.AddRange(System.Collections.Generic.IEnumerable{Furcadia.Net.FURRE})">
            <summary>
            add a range of Furres to the list
            </summary>
            <param name="range">
            </param>
        </member>
        <member name="M:Furcadia.Net.FURREList.Clear">
            <summary>
            </summary>
        </member>
        <member name="M:Furcadia.Net.FURREList.Contains(System.Int32)">
            <summary>
            </summary>
            <param name="FurreID">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURREList.Contains(Furcadia.Net.FURRE)">
            <summary>
            </summary>
            <param name="Furre">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURREList.CopyTo(System.Array,System.Int32)">
            <summary>
            </summary>
            <param name="array">
            </param>
            <param name="index">
            </param>
        </member>
        <member name="M:Furcadia.Net.FURREList.GetEnumerator">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURREList.IndexOf(Furcadia.Net.FURRE)">
            <summary>
            </summary>
            <param name="Furre">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURREList.Remove(System.Int32)">
            <summary>
            Removes a Furre based on their Furre ID
            </summary>
            <param name="FurreID">
            </param>
        </member>
        <member name="M:Furcadia.Net.FURREList.MoveNext">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Net.FURREList.Reset">
            <summary>
            </summary>
        </member>
        <member name="M:Furcadia.Net.FURREList.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing">
            </param>
        </member>
        <member name="T:Furcadia.Net.NetClient">
            <summary>
            Stuff for Handling Game server Connection
            <para>Take note, We Need SSL/TLS here</para>
            </summary>
        </member>
        <member name="T:Furcadia.Net.NetConnection">
             <summary>
             NetConnection
             <para>Derived from NetProxy for Stand a lone connections</para>
            
            <para>Log Header</para>
            <para>Format: (date,Version) AuthorName, Changes.</para>
            <para> (?,2007) Kylix, Initial Coder and SimpleProxy project manager</para>
            <para> (Oct 27,2009) Squizzle, Added NetMessage, delegates, and NetProxy wrapper class.</para>
            <para>(July 26, 2011) Gerolkae, added setting.ini switch for proxy.ini</para>
            <para> (Mar 12,2014,0.2.12) Gerolkae, Adapted Paths to work with a Supplied path</para>
             </summary>
        </member>
        <member name="T:Furcadia.Net.NetConnection.ActionDelegate">
            <summary>
            </summary>
        </member>
        <member name="T:Furcadia.Net.NetConnection.DataEventHandler2">
            <summary>
            </summary>
            <param name="data">
            </param>
        </member>
        <member name="T:Furcadia.Net.NetConnection.ErrorEventHandler">
            <summary>
            </summary>
            <param name="e">
            </param>
            <param name="o">
            </param>
            <param name="n">
            </param>
        </member>
        <member name="E:Furcadia.Net.NetConnection.Connected">
             <summary>
            This is triggered when the
             </summary>
        </member>
        <member name="E:Furcadia.Net.NetConnection.Error">
            <summary>
            This is triggered when a handled Exception is thrown.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetConnection.ServerData">
            <summary>
            This is triggered when the Server sends data to the client. Doesn't expect a return value.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetConnection.ServerDisConnected">
             <summary>
            This is triggered when the Server Disconnects
             </summary>
        </member>
        <member name="F:Furcadia.Net.NetConnection.BUFFER_CAP">
            <summary>
            Max buffer size
            </summary>
        </member>
        <member name="F:Furcadia.Net.NetConnection.FurcPath">
            <summary>
            </summary>
        </member>
        <member name="M:Furcadia.Net.NetConnection.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Furcadia.Net.NetConnection.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="port">
            </param>
        </member>
        <member name="M:Furcadia.Net.NetConnection.#ctor(System.String,System.Int32)">
            <summary>
            </summary>
            <param name="host">
            </param>
            <param name="port">
            </param>
        </member>
        <member name="M:Furcadia.Net.NetConnection.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            </summary>
            <param name="ip">
            </param>
            <param name="port">
            </param>
        </member>
        <member name="P:Furcadia.Net.NetConnection.IsServerConnected">
            <summary>
            Proxy is connected, or not.
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetConnection.BufferCapacity">
            <summary>
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetConnection.EncoderPage">
            <summary>
            </summary>
        </member>
        <member name="M:Furcadia.Net.NetConnection.Connect">
            <summary>
            Connects to the Furcadia Server and starts the mini proxy.
            </summary>
        </member>
        <member name="M:Furcadia.Net.NetConnection.Kill">
            <summary>
            Terminates the connection.
            </summary>
        </member>
        <member name="M:Furcadia.Net.NetConnection.SendServer(Furcadia.Net.INetMessage)">
            <summary>
            Sends the text to the game server
            </summary>
            <param name="message">
            </param>
        </member>
        <member name="M:Furcadia.Net.NetConnection.SendServer(System.String)">
            <summary>
            Sends Data to the Game server
            </summary>
            <param name="message">
            </param>
        </member>
        <member name="M:Furcadia.Net.NetConnection.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing">
            </param>
        </member>
        <member name="T:Furcadia.Net.NetProxyException">
            <summary>
            Desctiption of NetProxyException.
            </summary>
        </member>
        <member name="T:Furcadia.Net.NetServer">
            <summary>
            Class for handling Furcadia Client Handling
            </summary>
        </member>
        <member name="T:Furcadia.Net.ProxySession">
            <summary>
            Generic Proxy handler
            <para>
            Full functional proxy engine
            </para>
            <para>
            Tracks the Furcadia Connection
            </para>
            <para>
            Dream Status? FurreList DreamOwner Dream Title
            </para>
            </summary>
        </member>
        <member name="F:Furcadia.Net.ProxySession.FurcadiaProxy">
            <summary>
            base proxy class
            </summary>
        </member>
        <member name="F:Furcadia.Net.ProxySession.ServQue">
            <summary>
            Snap in Send to server Buffer
            </summary>
        </member>
        <member name="F:Furcadia.Net.ProxySession.ServerParser">
            <summary>
            ServerData Parser
            </summary>
        </member>
        <member name="P:Furcadia.Net.ProxySession.FurcProcessId">
            <summary>
            Current Process ID of the Furcadia Client we're connected too
            </summary>
            <returns>
            Furcadia Process Id
            </returns>
        </member>
        <member name="M:Furcadia.Net.ProxySession.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Furcadia.Net.ProxySession.OnServerSent(System.Object,System.EventArgs)">
            <summary>
            Server Que handler
            <para>
            Be careful not to Overload the server Buffer
            </para>
            </summary>
            <param name="source">
            </param>
            <param name="">
            </param>
        </member>
        <member name="M:Furcadia.Net.ProxySession.SendServer(System.String)">
            <summary>
            Forward calls to our Proxy buffer
            </summary>
            <param name="message">
            </param>
        </member>
        <member name="M:Furcadia.Net.ProxySession.SendClient(System.String)">
            <summary>
            Sends Data to the Client
            </summary>
            <param name="message">
            </param>
        </member>
        <member name="M:Furcadia.Net.ProxySession.fIDtoFurre(System.Int32@)">
            <summary>
            </summary>
            <param name="ID">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Furcadia.Net.BotFurre">
            <summary>
            Settings for the Bot Furre
            </summary>
        </member>
        <member name="M:Furcadia.Net.BotFurre.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Furcadia.Net.Movement">
            <summary>
            Furcadia reconmended Material to support thier Protocol Standards
            </summary>
        </member>
        <member name="T:Furcadia.Net.NetProxy.ActionDelegate">
             <summary>
            
             </summary>
        </member>
        <member name="T:Furcadia.Net.NetProxy.DataEventHandler">
             <summary>
            
             </summary>
        </member>
        <member name="T:Furcadia.Net.NetProxy.DataEventHandler2">
             <summary>
            
             </summary>
        </member>
        <member name="T:Furcadia.Net.NetProxy.ErrorEventHandler">
             <summary>
            
             </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.Connected">
             <summary>
            This is triggered when the
             </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ServerDisConnected">
             <summary>
            This is triggered when the Server Disconnects
             </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ClientDisConnected">
             <summary>
            This is triggered when the Client Disconnects
             </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ServerData">
            <summary>
            This is triggered when the Server sends data to the client. Expects a return Value
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ServerData2">
            <summary>
            This is triggered when the Server sends data to the client. Doesn't expect a return value.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ClientData">
            <summary>
            This is triggered when the Client sends data to the server.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ClientData2">
            <summary>
            This is triggered when the Client sends data to the server. Expects a return value.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ClientExited">
            <summary>
            This is triggered when the user has exited/logoff Furcadia and the Furcadia
            client is closed.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.FurcSettingsRestored">
            <summary>
            This is triggered when t
            client is closed.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.Error">
            <summary>
            This is triggered when a handled Exception is thrown.
            </summary>
        </member>
        <member name="F:Furcadia.Net.NetProxy.BUFFER_CAP">
            <summary>
            Max buffer size
            </summary>
        </member>
        <member name="F:Furcadia.Net.NetProxy._lport">
             <summary>
            
             </summary>
        </member>
        <member name="F:Furcadia.Net.NetProxy.UseProxyIni">
            <summary>
            Use proxy.ini if it exists. otherwise use settings.ini.
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.Process">
            <summary>
            Process to start. (default: Furcadia.exe)
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.ProcID">
            <summary>
            Process ID for closing Furcadia.exe
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.ProcessPath">
            <summary>
            Process path (default: none)
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.ProcessCMD">
            <summary>
            Command to pass (default: -pick)
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.IsServerConnected">
            <summary>
            Proxy is connected, or not.
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.StandAloneMode">
            <summary>
            Standalone Mode
            Keep Connection after Client Closes/Disconnects
            </summary>
        </member>
        <member name="M:Furcadia.Net.NetProxy.SetProcess(System.String)">
            <summary>
            Sets the startup Process to the associated file. (default: %FurcadiaInstallPath%/Furcadia.exe)
            </summary>
            <param name="file">Process full path and file name.</param>
        </member>
        <member name="M:Furcadia.Net.NetProxy.Connect">
            <summary>
            Connects to the Furcadia Server and starts the mini proxy.
            </summary>
        </member>
        <member name="M:Furcadia.Net.NetProxy.CloseClient">
            <summary>
            Closes the Client Connection
            </summary>
        </member>
        <member name="M:Furcadia.Net.NetProxy.Kill">
            <summary>
            Terminates the connection.
            </summary>
        </member>
        <member name="T:Furcadia.Net.NetMessage">
            <summary>
            Default.
            </summary>
        </member>
        <member name="P:Furcadia.Net.PounceConnection.RawResponse">
            <summary>
            When a response from the server is recieved this property will contain
            the raw HTTP string.
            </summary>
        </member>
        <member name="P:Furcadia.Net.PounceConnection.TotalFurresOnline">
            <summary>
            Total online Furre count retrieved from a online check request
            </summary>
        </member>
        <member name="E:Furcadia.Net.PounceConnection.Response">
            <summary>
            Called when a online check request sends a response.  First argument is a list of players online.
            </summary>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.#ctor(System.String,System.String[])">
            <summary>
            A http web request
            </summary>
            <param name="url">Url (i.e http://on.furcadia.com) or if you have a custom online check server use that instead</param>
            <param name="shortN_friends">Friends (shortname) (i.e emeraldflame instead of Emerald|Flame)</param>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.Connect">
            <summary>
            Connects to the online check server and sends a online check request
            </summary>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.ConnectAsync">
            <summary>
            Connects asynchronously to the online check server and sends a request without affecting the executing thread.
            </summary>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.AddFriend(System.String)">
            <summary>
            Adds a friend to a list of friends.
            Throws a Exception on non alphanumeric string.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/>
            </param>
            <returns>
            A <see cref="T:System.Boolean"/>.
            True if successfully added friend name.
            False if name already added.
            </returns>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.CheckFriendNames">
            <summary>
            Iterates through friend's names to make sure they are valid alpha numeric (a-z0-9).
            </summary>
            <returns>True: All friends names are fine.  False otherwise.</returns>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.CheckFriendName(System.String)">
            <summary>
            Checks a friend's name to make sure it is a valid alpha numeric (a-z0-9).
            </summary>
            <returns>True: Friend name is fine.  False otherwise.</returns>
        </member>
        <member name="T:Furcadia.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Furcadia.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Furcadia.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Furcadia.Properties.Resources.DefaultMapData">
             <summary>
               Looks up a localized string similar to MAP V01.40 Furcadia
            height={0}
            width={1}
            revision=0
            patcht=0
            name=
            patchs=
            encoded=0
            allowjs=1
            allowlf=1
            allowfurl=1
            swearfilter=0
            nowho=0
            forcesittable=0
            allowshouts=1
            rating=Teen+
            allowlarge=0
            notab=0
            nonovelty=0
            parentalcontrols=0
            BODY
            {2}.
             </summary>
        </member>
        <member name="P:Furcadia.Properties.Resources.furc">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Furcadia.Settings">
            <summary>
            A simple way to load settings whether from ini or xml.
            </summary>
        </member>
        <member name="F:Furcadia.Settings.FurcPath">
             setting path
             setting file
             setting fields
            
        </member>
        <member name="M:Furcadia.Settings.InitializeFurcadiaSettings(System.String)">
            Load and Store settings.ini with backup
        </member>
        <member name="M:Furcadia.Settings.RestoreFurcadiaSettings(System.String[])">
            restore from backup settings.ini
        </member>
        <member name="M:Furcadia.Settings.Load``1(System.String)">
            <summary>
            Loads a xml file and returns a new instance of T. T must be Xml Deserializable!
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <returns>Default of T (default(T)) on file not found.  Else it returns a instance of T.</returns>
        </member>
        <member name="M:Furcadia.Settings.Load(System.String)">
            <summary>
            Loads an ini file and returns a key/value pair of values.
            (Note: It reads Key=Value pairs only.)
            (Add: Also the ini must be proper, one key/value per line. No section garbage.)
            </summary>
            <param name="file"></param>
            <returns>A new Hashtable, or a empty Hashtable on file not found.</returns>
        </member>
        <member name="T:Furcadia.Util">
            <summary>
            Utility class with helper functions.
            </summary>
        </member>
        <member name="P:Furcadia.Util.Host">
            <summary>
            Gets or sets the Furcadia server host (i.e lightbringer.furcadia.com).
            </summary>
        </member>
        <member name="P:Furcadia.Util.Ip">
            <summary>
            Gets or sets the IP of the Furcadia server. (Note(7/22/2010): Do not use this. The IP may
            be wrong. Use Furcadia.Util.Host instead.
            </summary>
        </member>
        <member name="M:Furcadia.Util.Base220ToUInt(System.String)">
            <summary>
            </summary>
            <param name="str">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Furcadia.Util.FurcadiaShortName(System.String)">
            <summary>
            Takes a string and returns Furcadia's short name format
            </summary>
            <param name="name">
            </param>
            <returns>
            </returns>
        </member>
    </members>
</doc>
