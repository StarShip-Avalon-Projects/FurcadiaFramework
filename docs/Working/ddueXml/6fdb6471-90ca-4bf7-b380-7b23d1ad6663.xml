<?xml version="1.0" encoding="utf-8"?>
<topic id="6fdb6471-90ca-4bf7-b380-7b23d1ad6663" revisionNumber="1">
  <developerSampleDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>Starting a proxy is simple.</para>
      <para>
        <example>
          <code  language="csharp">
            using BugProxy.Net;
            using Furcadia.Net.Options;
            using Furcadia.Net.Proxy;
            using System;

            namespace BugConsole
            {
            internal class Program
            {
            #region Private Fields

            private static ProxySession proxy;
            private static ProxySessionOptions ProxyOptions;

            #endregion Private Fields

            #region Private Methods

            private static void Main(string[] args)
            {
            while (true)
            {
            Console.WriteLine("type connect when ready");
            string cmd = Console.ReadLine();

            if (cmd.ToLower() == "connect")
            {
            if (proxy is null)
            {
            ProxyOptions = new ProxySessionOptions();
            proxy = new ProxySession(ProxyOptions);
            proxy.ClientData2 += onClientDataReceived;
            proxy.ServerData2 += onServerDataReceived;
            // We need a Character.ini file to work with -Gerolkae
            proxy.Connect();
            }
            else if (!proxy.IsServerConnected)
            {
            proxy.Connect();
            }
            }
            }
            }

            static private void onClientDataReceived(string data)
            {
            Console.WriteLine("C>: " + data);
            proxy.SendToServer(data);
        }

        static private void onServerDataReceived(string data)
        {
            Console.WriteLine("S>: " + data);
            proxy.SendToClient(data);
        }

        #endregion Private Methods
    }
}
          </code>
          <code language="vb.net">

            Dim proxy As New NetProxy()

            proxy.ServerData += Sub(data As String)
            Console.WriteLine(Convert.ToString("SERVER: ") &amp; data)
            Return data

            End Sub

            proxy.ClientExited += Sub()
            Console.WriteLine("Client exited.")
            proxy.Kill()

            End Sub
            proxy.[Error] += Sub(e As Exception) Console.WriteLine(e.Message)
            proxy.Connect()
          </code>
        </example>
      </para>
    </introduction>
    <!-- <procedure>Optional procedures.  See How To document for procedure layout example.</procedure> -->
    <!-- <requirements>Optional requirements section</requirements> -->
    <!-- <demonstrates>Optional info about what is demonstrated</demonstrates> -->
    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Optional section title</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>Add one or more sections with content</para>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerSampleDocument>
</topic>