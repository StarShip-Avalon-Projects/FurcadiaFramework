<?xml version="1.0" encoding="utf-8"?>
<topic id="8d0a663e-8095-408a-b860-f55d2fc3ccbe" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Welcome to Furcadia Frame Work for Third Party Programs.</para>
      <para>
        Furcadia Framework is intended to help the community develop Third Party Applications using the .NET Framework.
        This library includes all the basic functionality for working with the Furcadia Client, associated programs, and services.
      </para>

      <para>
        Copies of this document will be included as a Compiled Help File (*.chm) in each release of the SDK. All current
        documentation will be stored at our 
        <externalLink>
          <linkText>GitHub Repository</linkText>
          <linkUri>https://starship-avalon-projects.github.io/FurcadiaFramework/</linkUri>
        </externalLink>.
        Alternatively, you can download this document in a Compiled Help File format
        <externalLink>
          <linkText>here</linkText>
          <linkUri>https://starship-avalon-projects.github.io/FurcadiaFramework/Furcadia_Framework_Help.chm</linkUri>
        </externalLink>.
      </para>
    </introduction>

    <section>
      <title>Project Description</title>
      <content>
        <para>
          We're Currently working on a ProxySession Class in the Furcadia Framework Library. This
          Class is intended to be a drop in replacement for NetProxy and will include the
          bells and whistles for basic operation. To assist us in further development of the library,
          we have under taken a mission to document all aspects of Furcadia that we can. 
          From file specificifications and configurations to items lists and patch information, this
          project intends to capture it all for both legacy and modern Furcadia.
        </para>
        <para>
          Anyone is welcome to contribute to this project. Our aim is to support the community
          in any area we can. This often requires updating older documentation in the depths of the internet
          and bringing it to one community supported arena.
        </para>
        <list class="ordered">
          <listItem>
            <para>
              <legacyBold>Client to Server Queue Manager</legacyBold> This will Absorb all the SendToServer instructions and spoon
              feed them to the game server without overloading the Servers' Buffer. In here we'll handle
              Throat-Tired Syndrome and NoEndurance.  
              <codeEntityReference qualifyHint="true" autoUpgrade="true">
                T:Furcadia.Net.Utils.ServerQue
              </codeEntityReference> 
          </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>Dream Patron List Manager(<codeEntityReference qualifyHint="false">N:Furcadia.Net.Dream</codeEntityReference>)</legacyBold> This will maintain a list of players in the current dream and keep
              track of basic stats such as current player position, costume settings, taking advantage of
              <externalLink>
                <linkText>DragonSpeak Parameters</linkText>
                <linkAlternateText>DragonSpeak Parameters</linkAlternateText>
                <linkUri>http://cms.furcadia.com/creations/dreammaking/dragonspeak/dsparams</linkUri>
              </externalLink>.
           
               
           
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>Pounce Connection</legacyBold> Player online detection.
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>Account Log-on</legacyBold> Directly connecting to the Furcadia API using character .INI files for legacy support.
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>Server to Client Instruction Handling</legacyBold> Parsing Server data for basic Proxy operation with events
              leading out for custom code links. The events will return Server Data and EventArgs. This will
              apply to Text channel parsing as well.
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>SSL/TLS Connection</legacyBold> Handling of game server Security Certificates for an encrypted connection.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
      <!--ButgTraq-->
      <link xlink:href="1711b873-c91f-4780-8e67-6c39206cb317" />
      <!--About Link-->
      <link xlink:href="64d441eb-864b-4f9e-994f-2d87632ea597" />
      <!--Version History-->
      <link xlink:href="4340cd61-7802-4111-a144-fc835a39faf6" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>